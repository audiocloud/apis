use std::collections::HashMap;

use serde::{Deserialize, Serialize};

use crate::audio_engine::CompressedAudio;
use crate::common::media::{PlayId, RenderId};
use crate::{AppTaskId, DestinationPadId, DynamicInstanceNodeId, SourcePadId};

/// Event emitted by the audio engine
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum AudioEngineEvent {
    /// The task has stopped
    Stopped {
        /// Task id
        task_id: AppTaskId,
    },
    /// The task is playing
    Playing {
        /// Task id
        task_id:            AppTaskId,
        /// Play id
        play_id:            PlayId,
        /// Compressed and encoded audio
        audio:              CompressedAudio,
        /// Peak meters for each source pad
        output_peak_meters: HashMap<SourcePadId, Vec<f64>>,
        /// Peak meters for each destination pad
        input_peak_meters:  HashMap<DestinationPadId, Vec<f64>>,
        /// Reports generated by dynamic instance nodes
        dynamic_reports:    HashMap<DynamicInstanceNodeId, serde_json::Value>,
    },
    /// Playing failed with an error
    PlayingFailed {
        /// Task id
        task_id: AppTaskId,
        /// Play id
        play_id: PlayId,
        /// Error details
        error:   String,
    },
    /// Task is rendering
    Rendering {
        /// Taks id
        task_id:    AppTaskId,
        /// Render id
        render_id:  RenderId,
        /// Completion in percent
        completion: f64,
    },
    /// Rendering successfully finished
    RenderingFinished {
        /// Task id
        task_id:   AppTaskId,
        /// Render id
        render_id: RenderId,
        /// Path to the media file on the audio engine computer
        path:      String,
    },
    /// Rendering failed with an error
    RenderingFailed {
        /// Task id
        task_id:   AppTaskId,
        /// Render id
        render_id: RenderId,
        /// Error details
        error:     String,
    },
    /// A general error has happened on at task
    Error {
        /// Task id
        task_id: AppTaskId,
        /// Error details
        error:   String,
    },
}

impl AudioEngineEvent {
    pub fn task_id(&self) -> &AppTaskId {
        match self {
            AudioEngineEvent::Stopped { task_id } => task_id,
            AudioEngineEvent::Playing { task_id, .. } => task_id,
            AudioEngineEvent::PlayingFailed { task_id, .. } => task_id,
            AudioEngineEvent::Rendering { task_id, .. } => task_id,
            AudioEngineEvent::RenderingFinished { task_id, .. } => task_id,
            AudioEngineEvent::RenderingFailed { task_id, .. } => task_id,
            AudioEngineEvent::Error { task_id, .. } => task_id,
        }
    }
}
